########################################
# SWIPE-NOZZLE
########################################  

[gcode_macro CLEAN_NOZZLE]
gcode:
    G90
    {% if printer.extruder.can_extrude|lower == 'true' %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        G1 E30 F200
        G1 X-23 F12000
        G1 X-43 F12000
        G1 X-23 F12000
        G1 X-43 F12000
    {% else %}
        RESPOND TYPE=command MSG="Extruder is not hot enough"
    {% endif %}
    {% if printer.extruder1.can_extrude|lower == 'true' %}
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_DUAL_CARRIAGE CARRIAGE=1
            G1 E30 F200
            G1 X322 F12000
            G1 X342 F12000
            G1 X322 F12000
            G1 X342 F12000                                                              # retract
        {% endif %}
    {% else %}
        RESPOND TYPE=command MSG="Extruder1 is not hot enough"
    {% endif %}
    G90
    G0 Z0.2 F600                                                                      
    G92 E0

########################################
# PRIME-LINE
########################################   

[gcode_macro PRIME_LINE]
gcode: 
    M117 Prime Line

    G92 E0;
    G1 X10.1 Y20 Z0.28 F5000.0;
    G1 X10.1 Y200.0 Z0.28 F1500.0 E15;
    G1 X10.4 Y200.0 Z0.28 F5000.0;
    G1 X10.4 Y20 Z0.28 F1500.0 E30;
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000;

########################################
# BED-MESH
########################################

[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
    SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1  

[gcode_macro LOAD_MESH_TEMP]
description: Load or generate a mesh
gcode:
    #### set defaults ####
    {% set bed_temperature = params.BED_TEMPERATURE|default(0) %}
    {% set force = params.FORCE|default(0) %}
    #### end off definition  ####
    {action_respond_info("- AUTOMATED BED MESH GENERATOR -")}
    {% if bed_temperature|int < 30 %}
        {action_respond_info("Your bed temp is to low, make sure it is at least 30 or higher")}
    {% else %}
        {% if printer.configfile.config["bed_mesh " + bed_temperature] is defined and force|int == 0 %}
            BED_MESH_PROFILE LOAD={bed_temperature}
            G28 Z #because Z-Tilt #remove line if you ran G28 before starting this macro
            {action_respond_info("Succesfully loaded bed_mesh "+ bed_temperature)}
        {% else %}
            {% if printer.configfile.config["bed_mesh " + bed_temperature] is defined and force|int == 1 %}
                BED_MESH_PROFILE REMOVE={bed_temperature}
            {% endif %}
            {action_respond_info("bed_mesh not defined, your bed temperature will go up!")}
            {action_respond_info("We will probe the bed and save the mesh as bed_mesh "+ bed_temperature)}
            ADD_BED_MESH TARGET_TEMP={bed_temperature}
        {% endif %}
    {% endif %}

[gcode_macro ADD_BED_MESH]
description: Generate a mesh and prepare for SAVE_CONFIG
gcode:
    #### set defaults ####
    {% set target_temp = params.TARGET_TEMP|default(30) %}
    #### end off definition  ####
    M190 S{target_temp} # Wait for the bed to hit target_temp
	G28
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={target_temp}
    BED_MESH_PROFILE REMOVE=default

[gcode_macro PREHEATANDMESH]
description: Preheat for mesh
gcode:
    #### set defaults ####
    {% set t_extruder = params.T_EXTRUDER|default(0) %}
    {% set t_bed = params.T_BED|default(0) %}
    #### end off definition  ####
    M104 S{t_extruder}
    M190 S{t_bed}
    G28
    M109 S{t_extruder}
    LOAD_MESH_TEMP BED_TEMPERATURE={t_bed}
    G28
    
[gcode_macro PREHEAT60]
description: Preheat bed 60C extruder 140C
gcode:
  PREHEATANDMESH T_BED=60 T_EXTRUDER=140

[gcode_macro PREHEAT80]
description: Preheat bed 80C extruder 140C
gcode:
  PREHEATANDMESH T_BED=80 T_EXTRUDER=140

########################################
# MACRO-TEST
########################################  

[gcode_macro TEST]
gcode:
  G90
  G1 X20 Y20 Z10 F1600
  G1 X120 Y120 F1600
  G1 X200 Y120 F1600
  G1 X200 Y200 F1600
  G1 X20 Y180 F1600
  G1 X200 Y20 F1600

########################################
# HOME-CHECK
########################################  

[gcode_macro home_check ]
gcode:
	{% if printer.toolhead.homed_axes != 'xyz' %}
	  G28
      G28 X
    {% endif %}

########################################
# CHANCEL-PRINT
########################################    

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}
   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 F6000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
      G90 ; Set coordinates to absolute
      G1 X10 Y296 F2000 ; Move Printer Head Out of Way
      ; M84 ; Disable stepper motors - don't so the gantry stays aligned
   {% endif %}
   ;set part fan speed to zero.
   M106 S0
   ;bed and hotend are left at the print temps in case I want to restart.
   TURN_OFF_HEATERS
   #M605 S1
   #SET_DUAL_CARRIAGE CARRIAGE=0
   #T0
   CLEAR_PAUSE
   BASE_CANCEL_PRINT
   DGUS_PRINT_END

########################################
# PAUSE-PRINT
########################################  

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    #Get Printer built volume dimensions
    {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
    {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
    ##### set defaults #####
    {% set x = params.X|default(X_MAX) %}      #edit to your park position
    {% set y = params.Y|default(Y_MAX) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      #G1 X{x} Y{y} F6000
      {% if printer.dual_carriage.mode == "MIRROR" %}
        G1 X0 Y296 F6000
      {% elif printer.dual_carriage.mode == "COPY" %}
        G1 X0 Y296 F6000
      {% else %}
        {% if printer.toolhead.extruder == 'extruder' %}
            G1 X{printer.configfile.config.stepper_x.position_endstop} F6000
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            G1 X{printer.configfile.config.dual_carriage.position_endstop} F6000
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
      {% endif %}  
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

########################################
# RESUME-PRINT
########################################  

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

########################################
# BEEPER
########################################  

#[gcode_macro M300]
#gcode:
#    # Use a default 1kHz tone if S is omitted.
#    {% set S = params.S|default(1000)|int %}
#    # Use a 10ms duration is P is omitted.
#    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    G4 P{P}
#    SET_PIN PIN=BEEPER_pin VALUE=0




######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

########################################
# MESH BED Only Printed/ PRINT-AREA
########################################  

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

######################################################################
# DUMP PARAMETER
###################################################################### 

[gcode_macro DUMP_PARAMETERS]
description: Debug: Print all entries of the printer object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}    

######################################################################
# Gcode ignore
######################################################################    
    
[gcode_macro M205]
gcode:
    G4

[gcode_macro M203]
gcode:
    G4

[gcode_macro M201]
gcode:
    G4

[gcode_macro M108]
gcode:
    G4